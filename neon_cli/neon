#!/usr/bin/env python3
import argparse
import json
import os
import subprocess
import sys
from typing import List

import requests

import logging

# enable debug logging
logging.basicConfig()
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

BIN_DIR = os.getenv('NEON_BINARIES_DIR', './')

if sys.version_info.major != 3 and sys.version_info.minor < 9:
    logger.warning(f'Warning: This script was written on python 3.9, your version is {sys.version}')


def start_broker(args: List[str]):
    subprocess.run([os.path.join(BIN_DIR, 'storage_broker')] + args)


def start_safekeeper(args: List[str]):
    subprocess.run([os.path.join(BIN_DIR, 'safekeeper')] + args)


def help_pageserver():
    subprocess.run([os.path.join(BIN_DIR, 'pageserver'), '--help'])


def start_pageserver(parsed, args: List[str]):
    broker = parsed.broker_http
    if not broker.startswith('http://'):
        broker = 'http://' + broker
    cmd = [os.path.join(BIN_DIR, 'pageserver'),
           '-D', parsed.workdir,
           '-c', f'broker_endpoint=\'{broker}\'',
           '-c', f'listen_pg_addr=\'{parsed.listen_pg}\'',
           '-c', f'listen_http_addr=\'{parsed.listen_http}\'',
           '-c', f'id={parsed.id}',
           ] + args
    logger.debug('Starting pageserver with command: %s', ' '.join(cmd))
    subprocess.run(cmd)


def init_compute(pageserver_pg, pageserver_http, pgbin, safekeerpers, spec_path):
    resp = requests.post(f'http://{pageserver_http}/v1/tenant/', json={})
    assert resp.status_code == 201
    tenant_id = resp.text.strip('"')

    # get postgres version
    pg_version = subprocess.run([pgbin, '--version'], capture_output=True).stdout.decode('utf-8').split()[2]
    pg_version = int(pg_version.split('.')[0])
    logger.info('Detected postgres version %s from `%s`', pg_version, pgbin + ' --version')

    resp = requests.post(
        f'http://{pageserver_http}/v1/tenant/{tenant_id}/timeline/',
        json={
            'tenant_id': tenant_id,
            'pg_version': pg_version
        }
    )
    assert resp.status_code == 201
    assert tenant_id == resp.json()['tenant_id']
    timeline_id = resp.json()['timeline_id']
    spec = COMPUTE_SPEC_TEMPLATE.replace('<TIMELINE_ID>', timeline_id)
    spec = spec.replace('<SAFEKEEPERS>', ','.join(safekeerpers))
    spec = spec.replace('<TENANT_ID>', tenant_id)

    ps_host, ps_port = pageserver_pg.split(':', 1)
    ps_connstring = f'host={ps_host} port={ps_port}'
    spec = spec.replace('<PAGESERVER_PG_CONNSTRING>', ps_connstring)

    with open(spec_path, 'w') as f:
        f.write(spec)
    logger.info('Wrote compute spec to %s', spec_path)


def help_compute():
    subprocess.run([os.path.join(BIN_DIR, 'compute_ctl'), '--help'])


def start_compute(pgdata, pgbin, spec_path, args: List[str]):
    with open(spec_path, 'r') as f:
        spec = json.loads(f.read())
    username = spec['cluster']['roles'][0]['name']
    port = None
    for s in spec['cluster']['settings']:
        if s['name'] == 'port':
            port = s['value']
            break
    assert port is not None
    pg_connstring = f'postgresql://{username}@localhost:{port}/postgres'
    logger.info('Starting compute, try to connect with connstring=%s', pg_connstring)
    subprocess.run([os.path.join(BIN_DIR, 'compute_ctl'),
                    '--pgdata', pgdata,
                    '-C', pg_connstring,
                    '-b', pgbin,
                    '-S', spec_path] + args)


def main():
    parser = argparse.ArgumentParser()
    command_parser = parser.add_subparsers(dest='command')
    command_parser.required = True
    command_parser.add_parser('help')
    command_parser.add_parser('broker')
    command_parser.add_parser('safekeeper')
    ps_parser = command_parser.add_parser('pageserver')
    ps_parser.add_argument('-D', '--workdir', default='.')
    ps_parser.add_argument('--id', required=True)
    ps_parser.add_argument('--broker-http', required=True)
    ps_parser.add_argument('--listen-pg', default='127.0.0.1:6400')
    ps_parser.add_argument('--listen-http', default='127.0.0.1:9898')

    compute_parser = command_parser.add_parser('compute')

    compute_command_parser = compute_parser.add_subparsers(dest='compute_command')
    init_compute_parser = compute_command_parser.add_parser(
        'init',
        help='Initializes a compute node by creating tenant and timeline '
             'on the pageserver, prints path to generated spec file.'
    )
    init_compute_parser.add_argument('--pageserver-pg', required=True)
    init_compute_parser.add_argument('--pageserver-http', required=True)
    init_compute_parser.add_argument('-b', '--pgbin', default='postgres')
    init_compute_parser.add_argument('-S', '--spec-path', default='compute_spec.json')
    init_compute_parser.add_argument('--safekeeper-pg', nargs='+', required=True)

    start_compute_parser = compute_command_parser.add_parser(
        'start',
        help='Starts a compute node with given spec file'
    )
    start_compute_parser.add_argument('--pgdata', required=True)
    start_compute_parser.add_argument('-b', '--pgbin', default='postgres')
    start_compute_parser.add_argument('-S', '--spec-path', default='compute_spec.json')

    parsed, args = parser.parse_known_args()
    if parsed.command == 'broker':
        start_broker(args)
    elif parsed.command == 'safekeeper':
        start_safekeeper(args)
    elif parsed.command == 'pageserver':
        start_pageserver(parsed, args)
    elif parsed.command == 'compute':
        if parsed.compute_command == 'init':
            init_compute(
                parsed.pageserver_pg,
                parsed.pageserver_http,
                parsed.pgbin,
                parsed.safekeeper_pg,
                parsed.spec_path
            )
        elif parsed.compute_command == 'start':
            start_compute(
                parsed.pgdata,
                parsed.pgbin,
                parsed.spec_path,
                args
            )
    elif parsed.command == 'help':
        if len(args) == 0:
            print('Please specify a command to get help for: ' + ', '.join(command_parser.choices.keys()),
                  file=sys.stderr)
        elif args[0] == 'broker':
            start_broker(['--help'])
        elif args[0] == 'safekeeper':
            start_safekeeper(['--help'])
        elif args[0] == 'pageserver':
            help_pageserver()
        elif args[0] == 'compute':
            help_compute()
        else:
            parser.print_help()


COMPUTE_SPEC_TEMPLATE = """{
    "format_version": 1.0,

    "timestamp": "2022-10-12T18:00:00.000Z",
    "operation_uuid": "0f657b36-4b0f-4a2d-9c2e-1dcd615e7d8c",

    "cluster": {
        "cluster_id": "local",
        "name": "local",
        "state": "restarted",
        "roles": [
            {
                "name": "cloud_admin",
                "encrypted_password": "b093c0d3b281ba6da1eacc608620abd8",
                "options": null
            }
        ],
        "databases": [
        ],
        "settings": [
            {
                "name": "fsync",
                "value": "off",
                "vartype": "bool"
            },
            {
                "name": "wal_level",
                "value": "replica",
                "vartype": "enum"
            },
            {
                "name": "wal_log_hints",
                "value": "on",
                "vartype": "bool"
            },
            {
                "name": "log_connections",
                "value": "on",
                "vartype": "bool"
            },
            {
                "name": "port",
                "value": "55433",
                "vartype": "integer"
            },
            {
                "name": "shared_buffers",
                "value": "1MB",
                "vartype": "string"
            },
            {
                "name": "max_connections",
                "value": "100",
                "vartype": "integer"
            },
            {
                "name": "listen_addresses",
                "value": "0.0.0.0",
                "vartype": "string"
            },
            {
                "name": "max_wal_senders",
                "value": "10",
                "vartype": "integer"
            },
            {
                "name": "max_replication_slots",
                "value": "10",
                "vartype": "integer"
            },
            {
                "name": "wal_sender_timeout",
                "value": "5s",
                "vartype": "string"
            },
            {
                "name": "wal_keep_size",
                "value": "0",
                "vartype": "integer"
            },
            {
                "name": "password_encryption",
                "value": "md5",
                "vartype": "enum"
            },
            {
                "name": "restart_after_crash",
                "value": "off",
                "vartype": "bool"
            },
            {
                "name": "synchronous_standby_names",
                "value": "walproposer",
                "vartype": "string"
            },
            {
                "name": "shared_preload_libraries",
                "value": "neon",
                "vartype": "string"
            },
            {
                "name": "neon.safekeepers",
                "value": "<SAFEKEEPERS>",
                "vartype": "string"
            },
            {
                "name": "neon.timeline_id",
                "value": "<TIMELINE_ID>",
                "vartype": "string"
            },
            {
                "name": "neon.tenant_id",
                "value": "<TENANT_ID>",
                "vartype": "string"
            },
            {
                "name": "neon.pageserver_connstring",
                "value": "<PAGESERVER_PG_CONNSTRING>",
                "vartype": "string"
            },
            {
                "name": "max_replication_write_lag",
                "value": "500MB",
                "vartype": "string"
            },
            {
                "name": "max_replication_flush_lag",
                "value": "10GB",
                "vartype": "string"
            }
        ]
    },

    "delta_operations": [
    ]
}
"""

if __name__ == '__main__':
    main()
