<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2500" height="1382" onload="init(evt)" viewBox="0 0 2500 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1382" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1365.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="2390" y="24.00">Search</text><text id="matched" x="2390" y="1365.00"> </text><svg id="frames" x="10" width="2480" total_samples="77"><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (4 samples, 5.19%)</title><rect x="2.5974%" y="677" width="5.1948%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="4"/><text x="2.7174%" y="687.50">bytes::bytes_mut..</text></g><g><title>core::ptr::drop_in_place&lt;pageserver::repository::Value&gt; (2 samples, 2.60%)</title><rect x="11.6883%" y="645" width="2.5974%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="2"/><text x="11.8083%" y="655.50">core::p..</text></g><g><title>bytes::bytes_mut::shared_v_drop (2 samples, 2.60%)</title><rect x="11.6883%" y="629" width="2.5974%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="2"/><text x="11.8083%" y="639.50">bytes::..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (1 samples, 1.30%)</title><rect x="14.2857%" y="597" width="1.2987%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="1"/><text x="14.4057%" y="607.50">to..</text></g><g><title>core::ptr::drop_in_place&lt;pageserver::tenant::timeline::TimelineWriter&gt; (2 samples, 2.60%)</title><rect x="14.2857%" y="645" width="2.5974%" height="15" fill="rgb(208,68,35)" fg:x="11" fg:w="2"/><text x="14.4057%" y="655.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::MutexGuard&lt;()&gt;&gt; (2 samples, 2.60%)</title><rect x="14.2857%" y="629" width="2.5974%" height="15" fill="rgb(232,128,0)" fg:x="11" fg:w="2"/><text x="14.4057%" y="639.50">core::p..</text></g><g><title>&lt;tokio::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 2.60%)</title><rect x="14.2857%" y="613" width="2.5974%" height="15" fill="rgb(207,160,47)" fg:x="11" fg:w="2"/><text x="14.4057%" y="623.50">&lt;tokio:..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (1 samples, 1.30%)</title><rect x="15.5844%" y="597" width="1.2987%" height="15" fill="rgb(228,23,34)" fg:x="12" fg:w="1"/><text x="15.7044%" y="607.50">to..</text></g><g><title>pageserver::tenant::timeline::Timeline::writer::{{closure}} (2 samples, 2.60%)</title><rect x="16.8831%" y="645" width="2.5974%" height="15" fill="rgb(218,30,26)" fg:x="13" fg:w="2"/><text x="17.0031%" y="655.50">pageser..</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::lock::{{closure}} (2 samples, 2.60%)</title><rect x="16.8831%" y="629" width="2.5974%" height="15" fill="rgb(220,122,19)" fg:x="13" fg:w="2"/><text x="17.0031%" y="639.50">tokio::..</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::lock::{{closure}}::{{closure}} (2 samples, 2.60%)</title><rect x="16.8831%" y="613" width="2.5974%" height="15" fill="rgb(250,228,42)" fg:x="13" fg:w="2"/><text x="17.0031%" y="623.50">tokio::..</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::acquire::{{closure}} (2 samples, 2.60%)</title><rect x="16.8831%" y="597" width="2.5974%" height="15" fill="rgb(240,193,28)" fg:x="13" fg:w="2"/><text x="17.0031%" y="607.50">tokio::..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (2 samples, 2.60%)</title><rect x="16.8831%" y="581" width="2.5974%" height="15" fill="rgb(216,20,37)" fg:x="13" fg:w="2"/><text x="17.0031%" y="591.50">tokio::..</text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::rwlock::write_guard::RwLockWriteGuard&lt;pageserver::tenant::storage_layer::inmemory_layer::InMemoryLayerInner&gt;&gt; (1 samples, 1.30%)</title><rect x="19.4805%" y="597" width="1.2987%" height="15" fill="rgb(206,188,39)" fg:x="15" fg:w="1"/><text x="19.6005%" y="607.50">co..</text></g><g><title>&lt;tokio::sync::rwlock::write_guard::RwLockWriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.30%)</title><rect x="19.4805%" y="581" width="1.2987%" height="15" fill="rgb(217,207,13)" fg:x="15" fg:w="1"/><text x="19.6005%" y="591.50">&lt;t..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (1 samples, 1.30%)</title><rect x="19.4805%" y="565" width="1.2987%" height="15" fill="rgb(231,73,38)" fg:x="15" fg:w="1"/><text x="19.6005%" y="575.50">to..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 1.30%)</title><rect x="27.2727%" y="565" width="1.2987%" height="15" fill="rgb(225,20,46)" fg:x="21" fg:w="1"/><text x="27.3927%" y="575.50">co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 1.30%)</title><rect x="27.2727%" y="549" width="1.2987%" height="15" fill="rgb(210,31,41)" fg:x="21" fg:w="1"/><text x="27.3927%" y="559.50">co..</text></g><g><title>pageserver::page_cache::PageWriteGuard::mark_valid (1 samples, 1.30%)</title><rect x="28.5714%" y="565" width="1.2987%" height="15" fill="rgb(221,200,47)" fg:x="22" fg:w="1"/><text x="28.6914%" y="575.50">pa..</text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 1.30%)</title><rect x="28.5714%" y="549" width="1.2987%" height="15" fill="rgb(226,26,5)" fg:x="22" fg:w="1"/><text x="28.6914%" y="559.50">al..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 1.30%)</title><rect x="28.5714%" y="533" width="1.2987%" height="15" fill="rgb(249,33,26)" fg:x="22" fg:w="1"/><text x="28.6914%" y="543.50">al..</text></g><g><title>pageserver::tenant::ephemeral_file::EphemeralFile::write_blob::{{closure}} (16 samples, 20.78%)</title><rect x="20.7792%" y="597" width="20.7792%" height="15" fill="rgb(235,183,28)" fg:x="16" fg:w="16"/><text x="20.8992%" y="607.50">pageserver::tenant::ephemeral_file::EphemeralFile::write_blob::{{closur..</text></g><g><title>pageserver::tenant::ephemeral_file::EphemeralFile::write_blob::{{closure}}::Writer::push_bytes::{{closure}} (11 samples, 14.29%)</title><rect x="27.2727%" y="581" width="14.2857%" height="15" fill="rgb(221,5,38)" fg:x="21" fg:w="11"/><text x="27.3927%" y="591.50">pageserver::tenant::ephemeral_file::EphemeralFil..</text></g><g><title>pageserver::virtual_file::VirtualFile::write_all_at::{{closure}} (9 samples, 11.69%)</title><rect x="29.8701%" y="565" width="11.6883%" height="15" fill="rgb(247,18,42)" fg:x="23" fg:w="9"/><text x="29.9901%" y="575.50">pageserver::virtual_file::VirtualFile::..</text></g><g><title>pageserver::virtual_file::VirtualFile::write_at::{{closure}} (9 samples, 11.69%)</title><rect x="29.8701%" y="549" width="11.6883%" height="15" fill="rgb(241,131,45)" fg:x="23" fg:w="9"/><text x="29.9901%" y="559.50">pageserver::virtual_file::VirtualFile::..</text></g><g><title>pageserver::virtual_file::VirtualFile::with_file::{{closure}} (9 samples, 11.69%)</title><rect x="29.8701%" y="533" width="11.6883%" height="15" fill="rgb(249,31,29)" fg:x="23" fg:w="9"/><text x="29.9901%" y="543.50">pageserver::virtual_file::VirtualFile::..</text></g><g><title>prometheus::histogram::Histogram::observe_closure_duration (9 samples, 11.69%)</title><rect x="29.8701%" y="517" width="11.6883%" height="15" fill="rgb(225,111,53)" fg:x="23" fg:w="9"/><text x="29.9901%" y="527.50">prometheus::histogram::Histogram::obser..</text></g><g><title>pageserver::virtual_file::VirtualFile::with_file::{{closure}}::{{closure}} (9 samples, 11.69%)</title><rect x="29.8701%" y="501" width="11.6883%" height="15" fill="rgb(238,160,17)" fg:x="23" fg:w="9"/><text x="29.9901%" y="511.50">pageserver::virtual_file::VirtualFile::..</text></g><g><title>pageserver::virtual_file::VirtualFile::write_at::{{closure}}::{{closure}} (9 samples, 11.69%)</title><rect x="29.8701%" y="485" width="11.6883%" height="15" fill="rgb(214,148,48)" fg:x="23" fg:w="9"/><text x="29.9901%" y="495.50">pageserver::virtual_file::VirtualFile::..</text></g><g><title>&lt;std::fs::File as std::os::unix::fs::FileExt&gt;::write_at (9 samples, 11.69%)</title><rect x="29.8701%" y="469" width="11.6883%" height="15" fill="rgb(232,36,49)" fg:x="23" fg:w="9"/><text x="29.9901%" y="479.50">&lt;std::fs::File as std::os::unix::fs::Fi..</text></g><g><title>std::sys::unix::fs::File::write_at (9 samples, 11.69%)</title><rect x="29.8701%" y="453" width="11.6883%" height="15" fill="rgb(209,103,24)" fg:x="23" fg:w="9"/><text x="29.9901%" y="463.50">std::sys::unix::fs::File::write_at</text></g><g><title>std::sys::unix::fd::FileDesc::write_at (9 samples, 11.69%)</title><rect x="29.8701%" y="437" width="11.6883%" height="15" fill="rgb(229,88,8)" fg:x="23" fg:w="9"/><text x="29.9901%" y="447.50">std::sys::unix::fd::FileDesc::write_at</text></g><g><title>__pwrite64 (9 samples, 11.69%)</title><rect x="29.8701%" y="421" width="11.6883%" height="15" fill="rgb(213,181,19)" fg:x="23" fg:w="9"/><text x="29.9901%" y="431.50">__pwrite64</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 1.30%)</title><rect x="42.8571%" y="533" width="1.2987%" height="15" fill="rgb(254,191,54)" fg:x="33" fg:w="1"/><text x="42.9771%" y="543.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 1.30%)</title><rect x="42.8571%" y="517" width="1.2987%" height="15" fill="rgb(241,83,37)" fg:x="33" fg:w="1"/><text x="42.9771%" y="527.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 1.30%)</title><rect x="42.8571%" y="501" width="1.2987%" height="15" fill="rgb(233,36,39)" fg:x="33" fg:w="1"/><text x="42.9771%" y="511.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 1.30%)</title><rect x="42.8571%" y="485" width="1.2987%" height="15" fill="rgb(226,3,54)" fg:x="33" fg:w="1"/><text x="42.9771%" y="495.50">&lt;c..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (3 samples, 3.90%)</title><rect x="41.5584%" y="597" width="3.8961%" height="15" fill="rgb(245,192,40)" fg:x="32" fg:w="3"/><text x="41.6784%" y="607.50">std::collec..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 3.90%)</title><rect x="41.5584%" y="581" width="3.8961%" height="15" fill="rgb(238,167,29)" fg:x="32" fg:w="3"/><text x="41.6784%" y="591.50">hashbrown::..</text></g><g><title>hashbrown::map::make_hash (2 samples, 2.60%)</title><rect x="42.8571%" y="565" width="2.5974%" height="15" fill="rgb(232,182,51)" fg:x="33" fg:w="2"/><text x="42.9771%" y="575.50">hashbro..</text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 2.60%)</title><rect x="42.8571%" y="549" width="2.5974%" height="15" fill="rgb(231,60,39)" fg:x="33" fg:w="2"/><text x="42.9771%" y="559.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 1.30%)</title><rect x="44.1558%" y="533" width="1.2987%" height="15" fill="rgb(208,69,12)" fg:x="34" fg:w="1"/><text x="44.2758%" y="543.50">co..</text></g><g><title>&lt;pageserver::repository::Key as core::hash::Hash&gt;::hash (1 samples, 1.30%)</title><rect x="44.1558%" y="517" width="1.2987%" height="15" fill="rgb(235,93,37)" fg:x="34" fg:w="1"/><text x="44.2758%" y="527.50">&lt;p..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 1.30%)</title><rect x="44.1558%" y="501" width="1.2987%" height="15" fill="rgb(213,116,39)" fg:x="34" fg:w="1"/><text x="44.2758%" y="511.50">co..</text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 1.30%)</title><rect x="44.1558%" y="485" width="1.2987%" height="15" fill="rgb(222,207,29)" fg:x="34" fg:w="1"/><text x="44.2758%" y="495.50">co..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 1.30%)</title><rect x="44.1558%" y="469" width="1.2987%" height="15" fill="rgb(206,96,30)" fg:x="34" fg:w="1"/><text x="44.2758%" y="479.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 1.30%)</title><rect x="44.1558%" y="453" width="1.2987%" height="15" fill="rgb(218,138,4)" fg:x="34" fg:w="1"/><text x="44.2758%" y="463.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 1.30%)</title><rect x="44.1558%" y="437" width="1.2987%" height="15" fill="rgb(250,191,14)" fg:x="34" fg:w="1"/><text x="44.2758%" y="447.50">&lt;c..</text></g><g><title>core::hash::sip::u8to64_le (1 samples, 1.30%)</title><rect x="44.1558%" y="421" width="1.2987%" height="15" fill="rgb(239,60,40)" fg:x="34" fg:w="1"/><text x="44.2758%" y="431.50">co..</text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (1 samples, 1.30%)</title><rect x="45.4545%" y="565" width="1.2987%" height="15" fill="rgb(206,27,48)" fg:x="35" fg:w="1"/><text x="45.5745%" y="575.50">&lt;F..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (2 samples, 2.60%)</title><rect x="45.4545%" y="597" width="2.5974%" height="15" fill="rgb(225,35,8)" fg:x="35" fg:w="2"/><text x="45.5745%" y="607.50">tokio::..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}}::{{closure}} (2 samples, 2.60%)</title><rect x="45.4545%" y="581" width="2.5974%" height="15" fill="rgb(250,213,24)" fg:x="35" fg:w="2"/><text x="45.5745%" y="591.50">tokio::..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (1 samples, 1.30%)</title><rect x="46.7532%" y="565" width="1.2987%" height="15" fill="rgb(247,123,22)" fg:x="36" fg:w="1"/><text x="46.8732%" y="575.50">to..</text></g><g><title>utils::bin_ser::BeSer::ser_into (2 samples, 2.60%)</title><rect x="48.0519%" y="597" width="2.5974%" height="15" fill="rgb(231,138,38)" fg:x="37" fg:w="2"/><text x="48.1719%" y="607.50">utils::..</text></g><g><title>bincode::config::Options::serialize_into (2 samples, 2.60%)</title><rect x="48.0519%" y="581" width="2.5974%" height="15" fill="rgb(231,145,46)" fg:x="37" fg:w="2"/><text x="48.1719%" y="591.50">bincode..</text></g><g><title>bincode::internal::serialize_into (2 samples, 2.60%)</title><rect x="48.0519%" y="565" width="2.5974%" height="15" fill="rgb(251,118,11)" fg:x="37" fg:w="2"/><text x="48.1719%" y="575.50">bincode..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 2.60%)</title><rect x="48.0519%" y="549" width="2.5974%" height="15" fill="rgb(217,147,25)" fg:x="37" fg:w="2"/><text x="48.1719%" y="559.50">serde::..</text></g><g><title>pageserver::repository::_::&lt;impl serde::ser::Serialize for pageserver::repository::Value&gt;::serialize (2 samples, 2.60%)</title><rect x="48.0519%" y="533" width="2.5974%" height="15" fill="rgb(247,81,37)" fg:x="37" fg:w="2"/><text x="48.1719%" y="543.50">pageser..</text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 1.30%)</title><rect x="49.3506%" y="517" width="1.2987%" height="15" fill="rgb(209,12,38)" fg:x="38" fg:w="1"/><text x="49.4706%" y="527.50">&lt;&amp;..</text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u32 (1 samples, 1.30%)</title><rect x="49.3506%" y="501" width="1.2987%" height="15" fill="rgb(227,1,9)" fg:x="38" fg:w="1"/><text x="49.4706%" y="511.50">&lt;b..</text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u32 (1 samples, 1.30%)</title><rect x="49.3506%" y="485" width="1.2987%" height="15" fill="rgb(248,47,43)" fg:x="38" fg:w="1"/><text x="49.4706%" y="495.50">bi..</text></g><g><title>bincode::byteorder::WriteBytesExt::write_u32 (1 samples, 1.30%)</title><rect x="49.3506%" y="469" width="1.2987%" height="15" fill="rgb(221,10,30)" fg:x="38" fg:w="1"/><text x="49.4706%" y="479.50">bi..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 1.30%)</title><rect x="49.3506%" y="453" width="1.2987%" height="15" fill="rgb(210,229,1)" fg:x="38" fg:w="1"/><text x="49.4706%" y="463.50">st..</text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as std::io::Write&gt;::write_all (1 samples, 1.30%)</title><rect x="49.3506%" y="437" width="1.2987%" height="15" fill="rgb(222,148,37)" fg:x="38" fg:w="1"/><text x="49.4706%" y="447.50">&lt;s..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::extend_from_slice (1 samples, 1.30%)</title><rect x="49.3506%" y="421" width="1.2987%" height="15" fill="rgb(234,67,33)" fg:x="38" fg:w="1"/><text x="49.4706%" y="431.50">sm..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::insert_from_slice (1 samples, 1.30%)</title><rect x="49.3506%" y="405" width="1.2987%" height="15" fill="rgb(247,98,35)" fg:x="38" fg:w="1"/><text x="49.4706%" y="415.50">sm..</text></g><g><title>core::intrinsics::copy (1 samples, 1.30%)</title><rect x="49.3506%" y="389" width="1.2987%" height="15" fill="rgb(247,138,52)" fg:x="38" fg:w="1"/><text x="49.4706%" y="399.50">co..</text></g><g><title>&lt;utils::lsn::Lsn as core::cmp::Ord&gt;::cmp (1 samples, 1.30%)</title><rect x="50.6494%" y="581" width="1.2987%" height="15" fill="rgb(213,79,30)" fg:x="39" fg:w="1"/><text x="50.7694%" y="591.50">&lt;u..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (1 samples, 1.30%)</title><rect x="50.6494%" y="565" width="1.2987%" height="15" fill="rgb(246,177,23)" fg:x="39" fg:w="1"/><text x="50.7694%" y="575.50">co..</text></g><g><title>pageserver::tenant::storage_layer::inmemory_layer::InMemoryLayer::put_value::{{closure}} (26 samples, 33.77%)</title><rect x="19.4805%" y="613" width="33.7662%" height="15" fill="rgb(230,62,27)" fg:x="15" fg:w="26"/><text x="19.6005%" y="623.50">pageserver::tenant::storage_layer::inmemory_layer::InMemoryLayer::put_value::{{closure}}</text></g><g><title>utils::vec_map::VecMap&lt;K,V&gt;::append_or_update_last (2 samples, 2.60%)</title><rect x="50.6494%" y="597" width="2.5974%" height="15" fill="rgb(216,154,8)" fg:x="39" fg:w="2"/><text x="50.7694%" y="607.50">utils::..</text></g><g><title>utils::vec_map::VecMap&lt;K,V&gt;::instrument_vec_op (1 samples, 1.30%)</title><rect x="51.9481%" y="581" width="1.2987%" height="15" fill="rgb(244,35,45)" fg:x="40" fg:w="1"/><text x="52.0681%" y="591.50">ut..</text></g><g><title>utils::vec_map::VecMap&lt;K,V&gt;::append_or_update_last::{{closure}} (1 samples, 1.30%)</title><rect x="51.9481%" y="565" width="1.2987%" height="15" fill="rgb(251,115,12)" fg:x="40" fg:w="1"/><text x="52.0681%" y="575.50">ut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 1.30%)</title><rect x="51.9481%" y="549" width="1.2987%" height="15" fill="rgb(240,54,50)" fg:x="40" fg:w="1"/><text x="52.0681%" y="559.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 1.30%)</title><rect x="51.9481%" y="533" width="1.2987%" height="15" fill="rgb(233,84,52)" fg:x="40" fg:w="1"/><text x="52.0681%" y="543.50">al..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (1 samples, 1.30%)</title><rect x="54.5455%" y="565" width="1.2987%" height="15" fill="rgb(207,117,47)" fg:x="42" fg:w="1"/><text x="54.6655%" y="575.50">to..</text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::rwlock::write_guard::RwLockWriteGuard&lt;pageserver::tenant::timeline::layer_manager::LayerManager&gt;&gt; (2 samples, 2.60%)</title><rect x="54.5455%" y="597" width="2.5974%" height="15" fill="rgb(249,43,39)" fg:x="42" fg:w="2"/><text x="54.6655%" y="607.50">core::p..</text></g><g><title>&lt;tokio::sync::rwlock::write_guard::RwLockWriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 2.60%)</title><rect x="54.5455%" y="581" width="2.5974%" height="15" fill="rgb(209,38,44)" fg:x="42" fg:w="2"/><text x="54.6655%" y="591.50">&lt;tokio:..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (1 samples, 1.30%)</title><rect x="55.8442%" y="565" width="1.2987%" height="15" fill="rgb(236,212,23)" fg:x="43" fg:w="1"/><text x="55.9642%" y="575.50">to..</text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (1 samples, 1.30%)</title><rect x="57.1429%" y="565" width="1.2987%" height="15" fill="rgb(242,79,21)" fg:x="44" fg:w="1"/><text x="57.2629%" y="575.50">&lt;F..</text></g><g><title>pageserver::pgdatadir_mapping::DatadirModification::commit::{{closure}} (41 samples, 53.25%)</title><rect x="7.7922%" y="661" width="53.2468%" height="15" fill="rgb(211,96,35)" fg:x="6" fg:w="41"/><text x="7.9122%" y="671.50">pageserver::pgdatadir_mapping::DatadirModification::commit::{{closure}}</text></g><g><title>pageserver::tenant::timeline::TimelineWriter::put::{{closure}} (32 samples, 41.56%)</title><rect x="19.4805%" y="645" width="41.5584%" height="15" fill="rgb(253,215,40)" fg:x="15" fg:w="32"/><text x="19.6005%" y="655.50">pageserver::tenant::timeline::TimelineWriter::put::{{closure}}</text></g><g><title>pageserver::tenant::timeline::Timeline::put_value::{{closure}} (32 samples, 41.56%)</title><rect x="19.4805%" y="629" width="41.5584%" height="15" fill="rgb(211,81,21)" fg:x="15" fg:w="32"/><text x="19.6005%" y="639.50">pageserver::tenant::timeline::Timeline::put_value::{{closure}}</text></g><g><title>pageserver::tenant::timeline::Timeline::get_layer_for_write::{{closure}} (6 samples, 7.79%)</title><rect x="53.2468%" y="613" width="7.7922%" height="15" fill="rgb(208,190,38)" fg:x="41" fg:w="6"/><text x="53.3668%" y="623.50">pageserver::tenant::timel..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (3 samples, 3.90%)</title><rect x="57.1429%" y="597" width="3.8961%" height="15" fill="rgb(235,213,38)" fg:x="44" fg:w="3"/><text x="57.2629%" y="607.50">tokio::sync..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}}::{{closure}} (3 samples, 3.90%)</title><rect x="57.1429%" y="581" width="3.8961%" height="15" fill="rgb(237,122,38)" fg:x="44" fg:w="3"/><text x="57.2629%" y="591.50">tokio::sync..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (2 samples, 2.60%)</title><rect x="58.4416%" y="565" width="2.5974%" height="15" fill="rgb(244,218,35)" fg:x="45" fg:w="2"/><text x="58.5616%" y="575.50">tokio::..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;std::collections::hash::map::HashMap&lt;pageserver_api::reltag::RelTag,(utils::lsn::Lsn,u32)&gt;&gt;&gt; (5 samples, 6.49%)</title><rect x="61.0390%" y="581" width="6.4935%" height="15" fill="rgb(240,68,47)" fg:x="47" fg:w="5"/><text x="61.1590%" y="591.50">core::ptr::drop_in_p..</text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 6.49%)</title><rect x="61.0390%" y="565" width="6.4935%" height="15" fill="rgb(210,16,53)" fg:x="47" fg:w="5"/><text x="61.1590%" y="575.50">&lt;std::sync::rwlock::..</text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (5 samples, 6.49%)</title><rect x="61.0390%" y="549" width="6.4935%" height="15" fill="rgb(235,124,12)" fg:x="47" fg:w="5"/><text x="61.1590%" y="559.50">std::sys::unix::lock..</text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (5 samples, 6.49%)</title><rect x="61.0390%" y="533" width="6.4935%" height="15" fill="rgb(224,169,11)" fg:x="47" fg:w="5"/><text x="61.1590%" y="543.50">core::sync::atomic::..</text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 6.49%)</title><rect x="61.0390%" y="517" width="6.4935%" height="15" fill="rgb(250,166,2)" fg:x="47" fg:w="5"/><text x="61.1590%" y="527.50">core::sync::atomic::..</text></g><g><title>pageserver::pgdatadir_mapping::&lt;impl pageserver::tenant::timeline::Timeline&gt;::get_rel_exists::{{closure}} (6 samples, 7.79%)</title><rect x="61.0390%" y="613" width="7.7922%" height="15" fill="rgb(242,216,29)" fg:x="47" fg:w="6"/><text x="61.1590%" y="623.50">pageserver::pgdatadir_map..</text></g><g><title>pageserver::pgdatadir_mapping::&lt;impl pageserver::tenant::timeline::Timeline&gt;::get_cached_rel_size (6 samples, 7.79%)</title><rect x="61.0390%" y="597" width="7.7922%" height="15" fill="rgb(230,116,27)" fg:x="47" fg:w="6"/><text x="61.1590%" y="607.50">pageserver::pgdatadir_map..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 1.30%)</title><rect x="67.5325%" y="581" width="1.2987%" height="15" fill="rgb(228,99,48)" fg:x="52" fg:w="1"/><text x="67.6525%" y="591.50">st..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 1.30%)</title><rect x="67.5325%" y="565" width="1.2987%" height="15" fill="rgb(253,11,6)" fg:x="52" fg:w="1"/><text x="67.6525%" y="575.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 1.30%)</title><rect x="67.5325%" y="549" width="1.2987%" height="15" fill="rgb(247,143,39)" fg:x="52" fg:w="1"/><text x="67.6525%" y="559.50">ha..</text></g><g><title>hashbrown::map::make_hash (1 samples, 1.30%)</title><rect x="67.5325%" y="533" width="1.2987%" height="15" fill="rgb(236,97,10)" fg:x="52" fg:w="1"/><text x="67.6525%" y="543.50">ha..</text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 1.30%)</title><rect x="67.5325%" y="517" width="1.2987%" height="15" fill="rgb(233,208,19)" fg:x="52" fg:w="1"/><text x="67.6525%" y="527.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 1.30%)</title><rect x="67.5325%" y="501" width="1.2987%" height="15" fill="rgb(216,164,2)" fg:x="52" fg:w="1"/><text x="67.6525%" y="511.50">co..</text></g><g><title>&lt;pageserver_api::reltag::RelTag as core::hash::Hash&gt;::hash (1 samples, 1.30%)</title><rect x="67.5325%" y="485" width="1.2987%" height="15" fill="rgb(220,129,5)" fg:x="52" fg:w="1"/><text x="67.6525%" y="495.50">&lt;p..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 1.30%)</title><rect x="67.5325%" y="469" width="1.2987%" height="15" fill="rgb(242,17,10)" fg:x="52" fg:w="1"/><text x="67.6525%" y="479.50">co..</text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 1.30%)</title><rect x="67.5325%" y="453" width="1.2987%" height="15" fill="rgb(242,107,0)" fg:x="52" fg:w="1"/><text x="67.6525%" y="463.50">co..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 1.30%)</title><rect x="67.5325%" y="437" width="1.2987%" height="15" fill="rgb(251,28,31)" fg:x="52" fg:w="1"/><text x="67.6525%" y="447.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 1.30%)</title><rect x="67.5325%" y="421" width="1.2987%" height="15" fill="rgb(233,223,10)" fg:x="52" fg:w="1"/><text x="67.6525%" y="431.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 1.30%)</title><rect x="67.5325%" y="405" width="1.2987%" height="15" fill="rgb(215,21,27)" fg:x="52" fg:w="1"/><text x="67.6525%" y="415.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 1.30%)</title><rect x="67.5325%" y="389" width="1.2987%" height="15" fill="rgb(232,23,21)" fg:x="52" fg:w="1"/><text x="67.6525%" y="399.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 1.30%)</title><rect x="67.5325%" y="373" width="1.2987%" height="15" fill="rgb(244,5,23)" fg:x="52" fg:w="1"/><text x="67.6525%" y="383.50">co..</text></g><g><title>pageserver::pgdatadir_mapping::&lt;impl pageserver::tenant::timeline::Timeline&gt;::get_rel_size::{{closure}} (1 samples, 1.30%)</title><rect x="68.8312%" y="613" width="1.2987%" height="15" fill="rgb(226,81,46)" fg:x="53" fg:w="1"/><text x="68.9512%" y="623.50">pa..</text></g><g><title>pageserver::pgdatadir_mapping::&lt;impl pageserver::tenant::timeline::Timeline&gt;::get_cached_rel_size (1 samples, 1.30%)</title><rect x="68.8312%" y="597" width="1.2987%" height="15" fill="rgb(247,70,30)" fg:x="53" fg:w="1"/><text x="68.9512%" y="607.50">pa..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (1 samples, 1.30%)</title><rect x="68.8312%" y="581" width="1.2987%" height="15" fill="rgb(212,68,19)" fg:x="53" fg:w="1"/><text x="68.9512%" y="591.50">st..</text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (1 samples, 1.30%)</title><rect x="68.8312%" y="565" width="1.2987%" height="15" fill="rgb(240,187,13)" fg:x="53" fg:w="1"/><text x="68.9512%" y="575.50">st..</text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (1 samples, 1.30%)</title><rect x="68.8312%" y="549" width="1.2987%" height="15" fill="rgb(223,113,26)" fg:x="53" fg:w="1"/><text x="68.9512%" y="559.50">co..</text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 1.30%)</title><rect x="68.8312%" y="533" width="1.2987%" height="15" fill="rgb(206,192,2)" fg:x="53" fg:w="1"/><text x="68.9512%" y="543.50">co..</text></g><g><title>pageserver::walingest::WalIngest::ingest_decoded_block::{{closure}} (8 samples, 10.39%)</title><rect x="61.0390%" y="661" width="10.3896%" height="15" fill="rgb(241,108,4)" fg:x="47" fg:w="8"/><text x="61.1590%" y="671.50">pageserver::walingest::WalIngest::..</text></g><g><title>pageserver::walingest::WalIngest::put_rel_wal_record::{{closure}} (8 samples, 10.39%)</title><rect x="61.0390%" y="645" width="10.3896%" height="15" fill="rgb(247,173,49)" fg:x="47" fg:w="8"/><text x="61.1590%" y="655.50">pageserver::walingest::WalIngest::..</text></g><g><title>pageserver::walingest::WalIngest::handle_rel_extend::{{closure}} (8 samples, 10.39%)</title><rect x="61.0390%" y="629" width="10.3896%" height="15" fill="rgb(224,114,35)" fg:x="47" fg:w="8"/><text x="61.1590%" y="639.50">pageserver::walingest::WalIngest::..</text></g><g><title>pageserver::pgdatadir_mapping::DatadirModification::put_rel_extend::{{closure}} (1 samples, 1.30%)</title><rect x="70.1299%" y="613" width="1.2987%" height="15" fill="rgb(245,159,27)" fg:x="54" fg:w="1"/><text x="70.2499%" y="623.50">pa..</text></g><g><title>pageserver::pgdatadir_mapping::DatadirModification::get::{{closure}} (1 samples, 1.30%)</title><rect x="70.1299%" y="597" width="1.2987%" height="15" fill="rgb(245,172,44)" fg:x="54" fg:w="1"/><text x="70.2499%" y="607.50">pa..</text></g><g><title>pageserver::tenant::timeline::Timeline::get::{{closure}} (1 samples, 1.30%)</title><rect x="70.1299%" y="581" width="1.2987%" height="15" fill="rgb(236,23,11)" fg:x="54" fg:w="1"/><text x="70.2499%" y="591.50">pa..</text></g><g><title>pageserver::tenant::timeline::Timeline::lookup_cached_page::{{closure}} (1 samples, 1.30%)</title><rect x="70.1299%" y="565" width="1.2987%" height="15" fill="rgb(205,117,38)" fg:x="54" fg:w="1"/><text x="70.2499%" y="575.50">pa..</text></g><g><title>pageserver::page_cache::PageCache::lookup_materialized_page::{{closure}} (1 samples, 1.30%)</title><rect x="70.1299%" y="549" width="1.2987%" height="15" fill="rgb(237,72,25)" fg:x="54" fg:w="1"/><text x="70.2499%" y="559.50">pa..</text></g><g><title>pageserver::page_cache::PageCache::try_get_pinned_slot_permit::{{closure}} (1 samples, 1.30%)</title><rect x="70.1299%" y="533" width="1.2987%" height="15" fill="rgb(244,70,9)" fg:x="54" fg:w="1"/><text x="70.2499%" y="543.50">pa..</text></g><g><title>&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 1.30%)</title><rect x="70.1299%" y="517" width="1.2987%" height="15" fill="rgb(217,125,39)" fg:x="54" fg:w="1"/><text x="70.2499%" y="527.50">&lt;t..</text></g><g><title>tokio::sync::semaphore::Semaphore::acquire_owned::{{closure}} (1 samples, 1.30%)</title><rect x="70.1299%" y="501" width="1.2987%" height="15" fill="rgb(235,36,10)" fg:x="54" fg:w="1"/><text x="70.2499%" y="511.50">to..</text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 1.30%)</title><rect x="70.1299%" y="485" width="1.2987%" height="15" fill="rgb(251,123,47)" fg:x="54" fg:w="1"/><text x="70.2499%" y="495.50">&lt;t..</text></g><g><title>pageserver::walingest::WalIngest::ingest_heapam_record::{{closure}} (5 samples, 6.49%)</title><rect x="71.4286%" y="661" width="6.4935%" height="15" fill="rgb(221,13,13)" fg:x="55" fg:w="5"/><text x="71.5486%" y="671.50">pageserver::walinges..</text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 1.30%)</title><rect x="81.8182%" y="645" width="1.2987%" height="15" fill="rgb(238,131,9)" fg:x="63" fg:w="1"/><text x="81.9382%" y="655.50">co..</text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 1.30%)</title><rect x="81.8182%" y="629" width="1.2987%" height="15" fill="rgb(211,50,8)" fg:x="63" fg:w="1"/><text x="81.9382%" y="639.50">&lt;b..</text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 1.30%)</title><rect x="81.8182%" y="613" width="1.2987%" height="15" fill="rgb(245,182,24)" fg:x="63" fg:w="1"/><text x="81.9382%" y="623.50">by..</text></g><g><title>pageserver::walingest::WalIngest::ingest_record::{{closure}} (59 samples, 76.62%)</title><rect x="7.7922%" y="677" width="76.6234%" height="15" fill="rgb(242,14,37)" fg:x="6" fg:w="59"/><text x="7.9122%" y="687.50">pageserver::walingest::WalIngest::ingest_record::{{closure}}</text></g><g><title>pageserver::walrecord::decode_wal_record (5 samples, 6.49%)</title><rect x="77.9221%" y="661" width="6.4935%" height="15" fill="rgb(246,228,12)" fg:x="60" fg:w="5"/><text x="78.0421%" y="671.50">pageserver::walrecor..</text></g><g><title>postgres_ffi::v14::xlog_utils::&lt;impl postgres_ffi::v14::bindings::XLogRecord&gt;::from_bytes (1 samples, 1.30%)</title><rect x="83.1169%" y="645" width="1.2987%" height="15" fill="rgb(213,55,15)" fg:x="64" fg:w="1"/><text x="83.2369%" y="655.50">po..</text></g><g><title>utils::bin_ser::LeSer::des_from (1 samples, 1.30%)</title><rect x="83.1169%" y="629" width="1.2987%" height="15" fill="rgb(209,9,3)" fg:x="64" fg:w="1"/><text x="83.2369%" y="639.50">ut..</text></g><g><title>bincode::config::Options::deserialize_from (1 samples, 1.30%)</title><rect x="83.1169%" y="613" width="1.2987%" height="15" fill="rgb(230,59,30)" fg:x="64" fg:w="1"/><text x="83.2369%" y="623.50">bi..</text></g><g><title>bincode::internal::deserialize_from (1 samples, 1.30%)</title><rect x="83.1169%" y="597" width="1.2987%" height="15" fill="rgb(209,121,21)" fg:x="64" fg:w="1"/><text x="83.2369%" y="607.50">bi..</text></g><g><title>bincode::internal::deserialize_from_seed (1 samples, 1.30%)</title><rect x="83.1169%" y="581" width="1.2987%" height="15" fill="rgb(220,109,13)" fg:x="64" fg:w="1"/><text x="83.2369%" y="591.50">bi..</text></g><g><title>bincode::internal::deserialize_from_custom_seed (1 samples, 1.30%)</title><rect x="83.1169%" y="565" width="1.2987%" height="15" fill="rgb(232,18,1)" fg:x="64" fg:w="1"/><text x="83.2369%" y="575.50">bi..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 1.30%)</title><rect x="83.1169%" y="549" width="1.2987%" height="15" fill="rgb(215,41,42)" fg:x="64" fg:w="1"/><text x="83.2369%" y="559.50">&lt;c..</text></g><g><title>postgres_ffi::v14::bindings::_::&lt;impl serde::de::Deserialize for postgres_ffi::v14::bindings::XLogRecord&gt;::deserialize (1 samples, 1.30%)</title><rect x="83.1169%" y="533" width="1.2987%" height="15" fill="rgb(224,123,36)" fg:x="64" fg:w="1"/><text x="83.2369%" y="543.50">po..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 1.30%)</title><rect x="83.1169%" y="517" width="1.2987%" height="15" fill="rgb(240,125,3)" fg:x="64" fg:w="1"/><text x="83.2369%" y="527.50">&lt;&amp;..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 1.30%)</title><rect x="83.1169%" y="501" width="1.2987%" height="15" fill="rgb(205,98,50)" fg:x="64" fg:w="1"/><text x="83.2369%" y="511.50">&lt;&amp;..</text></g><g><title>&lt;postgres_ffi::v14::bindings::_::&lt;impl serde::de::Deserialize for postgres_ffi::v14::bindings::XLogRecord&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 1.30%)</title><rect x="83.1169%" y="485" width="1.2987%" height="15" fill="rgb(205,185,37)" fg:x="64" fg:w="1"/><text x="83.2369%" y="495.50">&lt;p..</text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (1 samples, 1.30%)</title><rect x="88.3117%" y="645" width="1.2987%" height="15" fill="rgb(238,207,15)" fg:x="68" fg:w="1"/><text x="88.4317%" y="655.50">&lt;b..</text></g><g><title>bytes::bytes_mut::BytesMut::set_start (1 samples, 1.30%)</title><rect x="88.3117%" y="629" width="1.2987%" height="15" fill="rgb(213,199,42)" fg:x="68" fg:w="1"/><text x="88.4317%" y="639.50">by..</text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::copy_to_bytes (3 samples, 3.90%)</title><rect x="89.6104%" y="645" width="3.8961%" height="15" fill="rgb(235,201,11)" fg:x="69" fg:w="3"/><text x="89.7304%" y="655.50">&lt;bytes::byt..</text></g><g><title>bytes::bytes_mut::BytesMut::split_to (2 samples, 2.60%)</title><rect x="90.9091%" y="629" width="2.5974%" height="15" fill="rgb(207,46,11)" fg:x="70" fg:w="2"/><text x="91.0291%" y="639.50">bytes::..</text></g><g><title>&lt;postgres_ffi::waldecoder::WalStreamDecoder as postgres_ffi::v15::waldecoder_handler::WalStreamDecoderHandler&gt;::complete_record (2 samples, 2.60%)</title><rect x="93.5065%" y="645" width="2.5974%" height="15" fill="rgb(241,35,35)" fg:x="72" fg:w="2"/><text x="93.6265%" y="655.50">&lt;postgr..</text></g><g><title>crc32c::crc32c_append (2 samples, 2.60%)</title><rect x="93.5065%" y="629" width="2.5974%" height="15" fill="rgb(243,32,47)" fg:x="72" fg:w="2"/><text x="93.6265%" y="639.50">crc32c:..</text></g><g><title>crc32c::hw_x86_64::crc32c (2 samples, 2.60%)</title><rect x="93.5065%" y="613" width="2.5974%" height="15" fill="rgb(247,202,23)" fg:x="72" fg:w="2"/><text x="93.6265%" y="623.50">crc32c:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 1.30%)</title><rect x="94.8052%" y="597" width="1.2987%" height="15" fill="rgb(219,102,11)" fg:x="73" fg:w="1"/><text x="94.9252%" y="607.50">co..</text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (75 samples, 97.40%)</title><rect x="0.0000%" y="805" width="97.4026%" height="15" fill="rgb(243,110,44)" fg:x="0" fg:w="75"/><text x="0.1200%" y="815.50">tokio::runtime::scheduler::current_thread::Context::enter</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}} (75 samples, 97.40%)</title><rect x="0.0000%" y="789" width="97.4026%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="75"/><text x="0.1200%" y="799.50">tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}</text></g><g><title>tokio::runtime::coop::budget (75 samples, 97.40%)</title><rect x="0.0000%" y="773" width="97.4026%" height="15" fill="rgb(216,99,12)" fg:x="0" fg:w="75"/><text x="0.1200%" y="783.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (75 samples, 97.40%)</title><rect x="0.0000%" y="757" width="97.4026%" height="15" fill="rgb(226,22,26)" fg:x="0" fg:w="75"/><text x="0.1200%" y="767.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}::{{closure}} (75 samples, 97.40%)</title><rect x="0.0000%" y="741" width="97.4026%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="75"/><text x="0.1200%" y="751.50">tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}::{{closure}}</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (75 samples, 97.40%)</title><rect x="0.0000%" y="725" width="97.4026%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="75"/><text x="0.1200%" y="735.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (75 samples, 97.40%)</title><rect x="0.0000%" y="709" width="97.4026%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="75"/><text x="0.1200%" y="719.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>pageserver::import_datadir::tests::test_basic::{{closure}} (75 samples, 97.40%)</title><rect x="0.0000%" y="693" width="97.4026%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="75"/><text x="0.1200%" y="703.50">pageserver::import_datadir::tests::test_basic::{{closure}}</text></g><g><title>postgres_ffi::waldecoder::WalStreamDecoder::poll_decode (10 samples, 12.99%)</title><rect x="84.4156%" y="677" width="12.9870%" height="15" fill="rgb(229,68,48)" fg:x="65" fg:w="10"/><text x="84.5356%" y="687.50">postgres_ffi::waldecoder::WalStreamDecoder:..</text></g><g><title>&lt;postgres_ffi::waldecoder::WalStreamDecoder as postgres_ffi::v15::waldecoder_handler::WalStreamDecoderHandler&gt;::poll_decode_internal (10 samples, 12.99%)</title><rect x="84.4156%" y="661" width="12.9870%" height="15" fill="rgb(252,8,32)" fg:x="65" fg:w="10"/><text x="84.5356%" y="671.50">&lt;postgres_ffi::waldecoder::WalStreamDecoder..</text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 1.30%)</title><rect x="96.1039%" y="645" width="1.2987%" height="15" fill="rgb(223,20,43)" fg:x="74" fg:w="1"/><text x="96.2239%" y="655.50">by..</text></g><g><title>pageserver::tenant::remote_timeline_client::RemoteTimelineClient::launch_queued_tasks::{{closure}} (1 samples, 1.30%)</title><rect x="97.4026%" y="277" width="1.2987%" height="15" fill="rgb(229,81,49)" fg:x="75" fg:w="1"/><text x="97.5226%" y="287.50">pa..</text></g><g><title>pageserver::tenant::remote_timeline_client::RemoteTimelineClient::perform_upload_task::{{closure}} (1 samples, 1.30%)</title><rect x="97.4026%" y="261" width="1.2987%" height="15" fill="rgb(236,28,36)" fg:x="75" fg:w="1"/><text x="97.5226%" y="271.50">pa..</text></g><g><title>&lt;pageserver::metrics::MeasuredRemoteOp&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.30%)</title><rect x="97.4026%" y="245" width="1.2987%" height="15" fill="rgb(249,185,26)" fg:x="75" fg:w="1"/><text x="97.5226%" y="255.50">&lt;p..</text></g><g><title>pageserver::tenant::remote_timeline_client::upload::upload_timeline_layer::{{closure}} (1 samples, 1.30%)</title><rect x="97.4026%" y="229" width="1.2987%" height="15" fill="rgb(249,174,33)" fg:x="75" fg:w="1"/><text x="97.5226%" y="239.50">pa..</text></g><g><title>remote_storage::GenericRemoteStorage::upload::{{closure}} (1 samples, 1.30%)</title><rect x="97.4026%" y="213" width="1.2987%" height="15" fill="rgb(233,201,37)" fg:x="75" fg:w="1"/><text x="97.5226%" y="223.50">re..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 1.30%)</title><rect x="97.4026%" y="197" width="1.2987%" height="15" fill="rgb(221,78,26)" fg:x="75" fg:w="1"/><text x="97.5226%" y="207.50">&lt;c..</text></g><g><title>&lt;remote_storage::local_fs::LocalFs as remote_storage::RemoteStorage&gt;::upload::{{closure}} (1 samples, 1.30%)</title><rect x="97.4026%" y="181" width="1.2987%" height="15" fill="rgb(250,127,30)" fg:x="75" fg:w="1"/><text x="97.5226%" y="191.50">&lt;r..</text></g><g><title>tokio::io::util::copy::copy::{{closure}} (1 samples, 1.30%)</title><rect x="97.4026%" y="165" width="1.2987%" height="15" fill="rgb(230,49,44)" fg:x="75" fg:w="1"/><text x="97.5226%" y="175.50">to..</text></g><g><title>&lt;tokio::io::util::copy::Copy&lt;R,W&gt; as core::future::future::Future&gt;::poll (1 samples, 1.30%)</title><rect x="97.4026%" y="149" width="1.2987%" height="15" fill="rgb(229,67,23)" fg:x="75" fg:w="1"/><text x="97.5226%" y="159.50">&lt;t..</text></g><g><title>tokio::io::util::copy::CopyBuffer::poll_copy (1 samples, 1.30%)</title><rect x="97.4026%" y="133" width="1.2987%" height="15" fill="rgb(249,83,47)" fg:x="75" fg:w="1"/><text x="97.5226%" y="143.50">to..</text></g><g><title>tokio::io::util::copy::CopyBuffer::poll_write_buf (1 samples, 1.30%)</title><rect x="97.4026%" y="117" width="1.2987%" height="15" fill="rgb(215,43,3)" fg:x="75" fg:w="1"/><text x="97.5226%" y="127.50">to..</text></g><g><title>&lt;tokio::io::util::buf_writer::BufWriter&lt;W&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 1.30%)</title><rect x="97.4026%" y="101" width="1.2987%" height="15" fill="rgb(238,154,13)" fg:x="75" fg:w="1"/><text x="97.5226%" y="111.50">&lt;t..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 1.30%)</title><rect x="97.4026%" y="85" width="1.2987%" height="15" fill="rgb(219,56,2)" fg:x="75" fg:w="1"/><text x="97.5226%" y="95.50">&lt;t..</text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (1 samples, 1.30%)</title><rect x="97.4026%" y="69" width="1.2987%" height="15" fill="rgb(233,0,4)" fg:x="75" fg:w="1"/><text x="97.5226%" y="79.50">to..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 1.30%)</title><rect x="97.4026%" y="53" width="1.2987%" height="15" fill="rgb(235,30,7)" fg:x="75" fg:w="1"/><text x="97.5226%" y="63.50">to..</text></g><g><title>syscall (1 samples, 1.30%)</title><rect x="97.4026%" y="37" width="1.2987%" height="15" fill="rgb(250,79,13)" fg:x="75" fg:w="1"/><text x="97.5226%" y="47.50">sy..</text></g><g><title>all (77 samples, 100%)</title><rect x="0.0000%" y="1333" width="100.0000%" height="15" fill="rgb(211,146,34)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1343.50"></text></g><g><title>import_datadir: (77 samples, 100.00%)</title><rect x="0.0000%" y="1317" width="100.0000%" height="15" fill="rgb(228,22,38)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1327.50">import_datadir:</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (77 samples, 100.00%)</title><rect x="0.0000%" y="1301" width="100.0000%" height="15" fill="rgb(235,168,5)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1311.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (77 samples, 100.00%)</title><rect x="0.0000%" y="1285" width="100.0000%" height="15" fill="rgb(221,155,16)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1295.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (77 samples, 100.00%)</title><rect x="0.0000%" y="1269" width="100.0000%" height="15" fill="rgb(215,215,53)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1279.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (77 samples, 100.00%)</title><rect x="0.0000%" y="1253" width="100.0000%" height="15" fill="rgb(223,4,10)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1263.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (77 samples, 100.00%)</title><rect x="0.0000%" y="1237" width="100.0000%" height="15" fill="rgb(234,103,6)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1247.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (77 samples, 100.00%)</title><rect x="0.0000%" y="1221" width="100.0000%" height="15" fill="rgb(227,97,0)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1231.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (77 samples, 100.00%)</title><rect x="0.0000%" y="1205" width="100.0000%" height="15" fill="rgb(234,150,53)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1215.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (77 samples, 100.00%)</title><rect x="0.0000%" y="1189" width="100.0000%" height="15" fill="rgb(228,201,54)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1199.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (77 samples, 100.00%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(222,22,37)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1183.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (77 samples, 100.00%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(237,53,32)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1167.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (77 samples, 100.00%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(233,25,53)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1151.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::{{closure}} (77 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(210,40,34)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1135.50">test::run_test::{{closure}}</text></g><g><title>test::run_test::{{closure}} (77 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(241,220,44)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1119.50">test::run_test::{{closure}}</text></g><g><title>test::run_test_in_process (77 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(235,28,35)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1103.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (77 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1087.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (77 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(224,130,29)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1071.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (77 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(235,212,8)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1055.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (77 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(223,33,50)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1039.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>test::run_test_in_process::{{closure}} (77 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(219,149,13)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1023.50">test::run_test_in_process::{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (77 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(250,156,29)" fg:x="0" fg:w="77"/><text x="0.1200%" y="1007.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (77 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="77"/><text x="0.1200%" y="991.50">core::ops::function::FnOnce::call_once</text></g><g><title>core::ops::function::FnOnce::call_once (77 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(216,135,14)" fg:x="0" fg:w="77"/><text x="0.1200%" y="975.50">core::ops::function::FnOnce::call_once</text></g><g><title>pageserver::import_datadir::tests::test_basic::{{closure}} (77 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(241,47,5)" fg:x="0" fg:w="77"/><text x="0.1200%" y="959.50">pageserver::import_datadir::tests::test_basic::{{closure}}</text></g><g><title>pageserver::import_datadir::tests::test_basic (77 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(233,42,35)" fg:x="0" fg:w="77"/><text x="0.1200%" y="943.50">pageserver::import_datadir::tests::test_basic</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (77 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(231,13,6)" fg:x="0" fg:w="77"/><text x="0.1200%" y="927.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::scheduler::current_thread::CurrentThread::block_on (77 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="77"/><text x="0.1200%" y="911.50">tokio::runtime::scheduler::current_thread::CurrentThread::block_on</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on (77 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(254,173,49)" fg:x="0" fg:w="77"/><text x="0.1200%" y="895.50">tokio::runtime::scheduler::current_thread::CoreGuard::block_on</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::enter (77 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(221,1,38)" fg:x="0" fg:w="77"/><text x="0.1200%" y="879.50">tokio::runtime::scheduler::current_thread::CoreGuard::enter</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (77 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(206,124,46)" fg:x="0" fg:w="77"/><text x="0.1200%" y="863.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::enter::{{closure}} (77 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="77"/><text x="0.1200%" y="847.50">tokio::runtime::scheduler::current_thread::CoreGuard::enter::{{closure}}</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}} (77 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(222,201,40)" fg:x="0" fg:w="77"/><text x="0.1200%" y="831.50">tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}</text></g><g><title>tokio::runtime::scheduler::current_thread::Context::run_task (2 samples, 2.60%)</title><rect x="97.4026%" y="805" width="2.5974%" height="15" fill="rgb(235,61,29)" fg:x="75" fg:w="2"/><text x="97.5226%" y="815.50">tokio::..</text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (2 samples, 2.60%)</title><rect x="97.4026%" y="789" width="2.5974%" height="15" fill="rgb(219,207,3)" fg:x="75" fg:w="2"/><text x="97.5226%" y="799.50">tokio::..</text></g><g><title>tokio::runtime::scheduler::current_thread::Context::run_task::{{closure}} (2 samples, 2.60%)</title><rect x="97.4026%" y="773" width="2.5974%" height="15" fill="rgb(222,56,46)" fg:x="75" fg:w="2"/><text x="97.5226%" y="783.50">tokio::..</text></g><g><title>tokio::runtime::coop::budget (2 samples, 2.60%)</title><rect x="97.4026%" y="757" width="2.5974%" height="15" fill="rgb(239,76,54)" fg:x="75" fg:w="2"/><text x="97.5226%" y="767.50">tokio::..</text></g><g><title>tokio::runtime::coop::with_budget (2 samples, 2.60%)</title><rect x="97.4026%" y="741" width="2.5974%" height="15" fill="rgb(231,124,27)" fg:x="75" fg:w="2"/><text x="97.5226%" y="751.50">tokio::..</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}} (2 samples, 2.60%)</title><rect x="97.4026%" y="725" width="2.5974%" height="15" fill="rgb(249,195,6)" fg:x="75" fg:w="2"/><text x="97.5226%" y="735.50">tokio::..</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (2 samples, 2.60%)</title><rect x="97.4026%" y="709" width="2.5974%" height="15" fill="rgb(237,174,47)" fg:x="75" fg:w="2"/><text x="97.5226%" y="719.50">tokio::..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 2.60%)</title><rect x="97.4026%" y="693" width="2.5974%" height="15" fill="rgb(206,201,31)" fg:x="75" fg:w="2"/><text x="97.5226%" y="703.50">tokio::..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (2 samples, 2.60%)</title><rect x="97.4026%" y="677" width="2.5974%" height="15" fill="rgb(231,57,52)" fg:x="75" fg:w="2"/><text x="97.5226%" y="687.50">tokio::..</text></g><g><title>tokio::runtime::task::harness::poll_future (2 samples, 2.60%)</title><rect x="97.4026%" y="661" width="2.5974%" height="15" fill="rgb(248,177,22)" fg:x="75" fg:w="2"/><text x="97.5226%" y="671.50">tokio::..</text></g><g><title>std::panic::catch_unwind (2 samples, 2.60%)</title><rect x="97.4026%" y="645" width="2.5974%" height="15" fill="rgb(215,211,37)" fg:x="75" fg:w="2"/><text x="97.5226%" y="655.50">std::pa..</text></g><g><title>std::panicking::try (2 samples, 2.60%)</title><rect x="97.4026%" y="629" width="2.5974%" height="15" fill="rgb(241,128,51)" fg:x="75" fg:w="2"/><text x="97.5226%" y="639.50">std::pa..</text></g><g><title>std::panicking::try::do_call (2 samples, 2.60%)</title><rect x="97.4026%" y="613" width="2.5974%" height="15" fill="rgb(227,165,31)" fg:x="75" fg:w="2"/><text x="97.5226%" y="623.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 2.60%)</title><rect x="97.4026%" y="597" width="2.5974%" height="15" fill="rgb(228,167,24)" fg:x="75" fg:w="2"/><text x="97.5226%" y="607.50">&lt;core::..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (2 samples, 2.60%)</title><rect x="97.4026%" y="581" width="2.5974%" height="15" fill="rgb(228,143,12)" fg:x="75" fg:w="2"/><text x="97.5226%" y="591.50">tokio::..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2 samples, 2.60%)</title><rect x="97.4026%" y="565" width="2.5974%" height="15" fill="rgb(249,149,8)" fg:x="75" fg:w="2"/><text x="97.5226%" y="575.50">tokio::..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 2.60%)</title><rect x="97.4026%" y="549" width="2.5974%" height="15" fill="rgb(243,35,44)" fg:x="75" fg:w="2"/><text x="97.5226%" y="559.50">tokio::..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (2 samples, 2.60%)</title><rect x="97.4026%" y="533" width="2.5974%" height="15" fill="rgb(246,89,9)" fg:x="75" fg:w="2"/><text x="97.5226%" y="543.50">tokio::..</text></g><g><title>pageserver::task_mgr::task_wrapper::{{closure}} (2 samples, 2.60%)</title><rect x="97.4026%" y="517" width="2.5974%" height="15" fill="rgb(233,213,13)" fg:x="75" fg:w="2"/><text x="97.5226%" y="527.50">pageser..</text></g><g><title>&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (2 samples, 2.60%)</title><rect x="97.4026%" y="501" width="2.5974%" height="15" fill="rgb(233,141,41)" fg:x="75" fg:w="2"/><text x="97.5226%" y="511.50">&lt;tokio:..</text></g><g><title>tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner (2 samples, 2.60%)</title><rect x="97.4026%" y="485" width="2.5974%" height="15" fill="rgb(239,167,4)" fg:x="75" fg:w="2"/><text x="97.5226%" y="495.50">tokio::..</text></g><g><title>&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2 samples, 2.60%)</title><rect x="97.4026%" y="469" width="2.5974%" height="15" fill="rgb(209,217,16)" fg:x="75" fg:w="2"/><text x="97.5226%" y="479.50">&lt;tokio:..</text></g><g><title>&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (2 samples, 2.60%)</title><rect x="97.4026%" y="453" width="2.5974%" height="15" fill="rgb(219,88,35)" fg:x="75" fg:w="2"/><text x="97.5226%" y="463.50">&lt;tokio:..</text></g><g><title>tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner (2 samples, 2.60%)</title><rect x="97.4026%" y="437" width="2.5974%" height="15" fill="rgb(220,193,23)" fg:x="75" fg:w="2"/><text x="97.5226%" y="447.50">tokio::..</text></g><g><title>&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2 samples, 2.60%)</title><rect x="97.4026%" y="421" width="2.5974%" height="15" fill="rgb(230,90,52)" fg:x="75" fg:w="2"/><text x="97.5226%" y="431.50">&lt;tokio:..</text></g><g><title>&lt;futures_util::future::future::catch_unwind::CatchUnwind&lt;Fut&gt; as core::future::future::Future&gt;::poll (2 samples, 2.60%)</title><rect x="97.4026%" y="405" width="2.5974%" height="15" fill="rgb(252,106,19)" fg:x="75" fg:w="2"/><text x="97.5226%" y="415.50">&lt;future..</text></g><g><title>std::panic::catch_unwind (2 samples, 2.60%)</title><rect x="97.4026%" y="389" width="2.5974%" height="15" fill="rgb(206,74,20)" fg:x="75" fg:w="2"/><text x="97.5226%" y="399.50">std::pa..</text></g><g><title>std::panicking::try (2 samples, 2.60%)</title><rect x="97.4026%" y="373" width="2.5974%" height="15" fill="rgb(230,138,44)" fg:x="75" fg:w="2"/><text x="97.5226%" y="383.50">std::pa..</text></g><g><title>std::panicking::try::do_call (2 samples, 2.60%)</title><rect x="97.4026%" y="357" width="2.5974%" height="15" fill="rgb(235,182,43)" fg:x="75" fg:w="2"/><text x="97.5226%" y="367.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 2.60%)</title><rect x="97.4026%" y="341" width="2.5974%" height="15" fill="rgb(242,16,51)" fg:x="75" fg:w="2"/><text x="97.5226%" y="351.50">&lt;core::..</text></g><g><title>&lt;futures_util::future::future::catch_unwind::CatchUnwind&lt;Fut&gt; as core::future::future::Future&gt;::poll::{{closure}} (2 samples, 2.60%)</title><rect x="97.4026%" y="325" width="2.5974%" height="15" fill="rgb(248,9,4)" fg:x="75" fg:w="2"/><text x="97.5226%" y="335.50">&lt;future..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::future::future::Future&gt;::poll (2 samples, 2.60%)</title><rect x="97.4026%" y="309" width="2.5974%" height="15" fill="rgb(210,31,22)" fg:x="75" fg:w="2"/><text x="97.5226%" y="319.50">&lt;core::..</text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 2.60%)</title><rect x="97.4026%" y="293" width="2.5974%" height="15" fill="rgb(239,54,39)" fg:x="75" fg:w="2"/><text x="97.5226%" y="303.50">&lt;tracin..</text></g><g><title>tracing::span::Span::enter (1 samples, 1.30%)</title><rect x="98.7013%" y="277" width="1.2987%" height="15" fill="rgb(230,99,41)" fg:x="76" fg:w="1"/><text x="98.8213%" y="287.50">tr..</text></g><g><title>tracing::span::Span::do_enter (1 samples, 1.30%)</title><rect x="98.7013%" y="261" width="1.2987%" height="15" fill="rgb(253,106,12)" fg:x="76" fg:w="1"/><text x="98.8213%" y="271.50">tr..</text></g><g><title>&lt;tracing_subscriber::filter::layer_filters::Filtered&lt;L,F,S&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (1 samples, 1.30%)</title><rect x="98.7013%" y="245" width="1.2987%" height="15" fill="rgb(213,46,41)" fg:x="76" fg:w="1"/><text x="98.8213%" y="255.50">&lt;t..</text></g><g><title>tracing_subscriber::layer::context::Context&lt;S&gt;::if_enabled_for (1 samples, 1.30%)</title><rect x="98.7013%" y="229" width="1.2987%" height="15" fill="rgb(215,133,35)" fg:x="76" fg:w="1"/><text x="98.8213%" y="239.50">tr..</text></g><g><title>tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (1 samples, 1.30%)</title><rect x="98.7013%" y="213" width="1.2987%" height="15" fill="rgb(213,28,5)" fg:x="76" fg:w="1"/><text x="98.8213%" y="223.50">tr..</text></g><g><title>core::ptr::drop_in_place&lt;tracing_subscriber::registry::SpanRef&lt;tracing_subscriber::layer::layered::Layered&lt;tracing_subscriber::filter::layer_filters::Filtered&lt;utils::logging::TracingEventCountLayer,tracing_subscriber::filter::env::EnvFilter,tracing_subscriber::layer::layered::Layered&lt;tracing_subscriber::filter::layer_filters::Filtered&lt;alloc::boxed::Box&lt;dyn tracing_subscriber::layer::Layer&lt;tracing_subscriber::registry::sharded::Registry&gt;+core::marker::Sync+core::marker::Send&gt;,tracing_subscriber::filter::env::EnvFilter,tracing_subscriber::registry::sharded::Registry&gt;,tracing_subscriber::registry::sharded::Registry&gt;&gt;,tracing_subscriber::layer::layered::Layered&lt;tracing_subscriber::filter::layer_filters::Filtered&lt;alloc::boxed::Box&lt;dyn tracing_subscriber::layer::Layer&lt;tracing_subscriber::registry::sharded::Registry&gt;+core::marker::Sync+core::marker::Send&gt;,tracing_subscriber::filter::env::EnvFilter,tracing_subscriber::registry::sharded::Registry&gt;,tracing_subscriber::registry::sharded::Registry&gt;&gt;&gt;&gt; (1 samples, 1.30%)</title><rect x="98.7013%" y="197" width="1.2987%" height="15" fill="rgb(215,77,49)" fg:x="76" fg:w="1"/><text x="98.8213%" y="207.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;tracing_subscriber::registry::sharded::Data&gt; (1 samples, 1.30%)</title><rect x="98.7013%" y="181" width="1.2987%" height="15" fill="rgb(248,100,22)" fg:x="76" fg:w="1"/><text x="98.8213%" y="191.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;sharded_slab::pool::Ref&lt;tracing_subscriber::registry::sharded::DataInner&gt;&gt; (1 samples, 1.30%)</title><rect x="98.7013%" y="165" width="1.2987%" height="15" fill="rgb(208,67,9)" fg:x="76" fg:w="1"/><text x="98.8213%" y="175.50">co..</text></g><g><title>&lt;sharded_slab::pool::Ref&lt;T,C&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.30%)</title><rect x="98.7013%" y="149" width="1.2987%" height="15" fill="rgb(219,133,21)" fg:x="76" fg:w="1"/><text x="98.8213%" y="159.50">&lt;s..</text></g><g><title>sharded_slab::page::slot::Guard&lt;T,C&gt;::release (1 samples, 1.30%)</title><rect x="98.7013%" y="133" width="1.2987%" height="15" fill="rgb(246,46,29)" fg:x="76" fg:w="1"/><text x="98.8213%" y="143.50">sh..</text></g><g><title>sharded_slab::page::slot::Slot&lt;T,C&gt;::release (1 samples, 1.30%)</title><rect x="98.7013%" y="117" width="1.2987%" height="15" fill="rgb(246,185,52)" fg:x="76" fg:w="1"/><text x="98.8213%" y="127.50">sh..</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 1.30%)</title><rect x="98.7013%" y="101" width="1.2987%" height="15" fill="rgb(252,136,11)" fg:x="76" fg:w="1"/><text x="98.8213%" y="111.50">co..</text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 1.30%)</title><rect x="98.7013%" y="85" width="1.2987%" height="15" fill="rgb(219,138,53)" fg:x="76" fg:w="1"/><text x="98.8213%" y="95.50">co..</text></g></svg></svg>